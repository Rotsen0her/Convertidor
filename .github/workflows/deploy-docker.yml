cat > .github/workflows/deploy-docker.yml << 'EOF'
name: Deploy to VPS with Docker

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  DEPLOY_PATH: /var/www/Convertidor

jobs:
  deploy:
    name: üöÄ Deploy to Production
    runs-on: ubuntu-latest
    
    steps:
      - name: üîç Checkout code
        uses: actions/checkout@v4
      
      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: üì• Install Node dependencies
        run: npm ci
      
      - name: üé® Build Tailwind CSS
        run: npm run build:css
      
      - name: üîê Setup SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
      
      - name: üíæ Create backup on server
        run: |
          ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
            if [ -d ${{ env.DEPLOY_PATH }} ]; then
              timestamp=$(date +%Y%m%d_%H%M%S)
              echo "üì¶ Creating backup..."
              tar -czf /tmp/convertidor_backup_${timestamp}.tar.gz \
                --exclude='node_modules' \
                --exclude='__pycache__' \
                --exclude='.git' \
                ${{ env.DEPLOY_PATH }} 2>/dev/null || true
              echo "‚úÖ Backup created: /tmp/convertidor_backup_${timestamp}.tar.gz"
              
              # Mantener solo los √∫ltimos 5 backups
              ls -t /tmp/convertidor_backup_*.tar.gz | tail -n +6 | xargs -r rm
            fi
          EOF
      
      - name: üì§ Sync files to server
        run: |
          rsync -avz --progress --delete \
            --exclude 'node_modules' \
            --exclude '__pycache__' \
            --exclude '.git' \
            --exclude '.env' \
            --exclude '*.pyc' \
            --exclude '*.log' \
            --exclude '.DS_Store' \
            ./ ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:${{ env.DEPLOY_PATH }}/
      
      - name: üê≥ Deploy with Docker Compose
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
        run: |
          ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
            set -e
            cd ${{ env.DEPLOY_PATH }}
            
            echo "üìÇ Directorio actual: $(pwd)"
            
            # Verificar que .env existe
            if [ ! -f .env ]; then
              echo "‚ùå Error: .env file not found"
              echo "Por favor configura el archivo .env en el servidor"
              exit 1
            fi
            
            # Cargar variables del .env
            source .env
            
            # Detener contenedores actuales
            echo "üõë Deteniendo contenedores..."
            docker-compose down || true
            
            # Construir im√°genes
            echo "üèóÔ∏è  Construyendo im√°genes..."
            docker-compose build --no-cache
            
            # Levantar servicios
            echo "üöÄ Iniciando servicios..."
            docker-compose up -d
            
            # Esperar a que MySQL est√© listo
            echo "‚è≥ Esperando a que MySQL est√© listo..."
            sleep 15
            
            # Verificar que los contenedores est√©n corriendo
            if ! docker-compose ps | grep -q "Up"; then
              echo "‚ùå Error: Los contenedores no se levantaron correctamente"
              docker-compose logs
              exit 1
            fi
            
            # Crear usuario admin si es la primera vez
            echo "üë§ Verificando usuario admin..."
            ADMIN_EXISTS=$(docker-compose exec -T db mysql -u root -p${MYSQL_ROOT_PASSWORD} zafiro_bi -se "SELECT COUNT(*) FROM usuarios WHERE usuario='admin'" 2>/dev/null || echo "0")
            
            if [ "$ADMIN_EXISTS" = "0" ]; then
              echo "üìù Creando usuario admin..."
              ADMIN_HASH=$(docker-compose exec -T backend python3 -c "from werkzeug.security import generate_password_hash; print(generate_password_hash('${ADMIN_PASSWORD:-admin123}'))" | tr -d '\r\n')
              
              docker-compose exec -T db mysql -u root -p${MYSQL_ROOT_PASSWORD} zafiro_bi <<EOSQL
              INSERT INTO usuarios (usuario, password, rol) VALUES ('admin', '${ADMIN_HASH}', 'admin');
EOSQL
              echo "‚úÖ Usuario admin creado"
            else
              echo "‚ÑπÔ∏è  Usuario admin ya existe"
            fi
            
            # Mostrar estado
            echo ""
            echo "üìä Estado de los contenedores:"
            docker-compose ps
            echo ""
          EOF
      
      - name: üîç Health Check
        run: |
          echo "‚è≥ Esperando que la aplicaci√≥n est√© lista..."
          sleep 10
          
          # Probar puerto 8080 (contenedor Docker)
          response=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.VPS_HOST }}:8080/ 2>/dev/null || echo "000")
          
          if [ "$response" = "200" ] || [ "$response" = "302" ] || [ "$response" = "301" ]; then
            echo "‚úÖ Aplicaci√≥n respondiendo correctamente (HTTP $response)"
          else
            echo "‚ö†Ô∏è  Advertencia: La aplicaci√≥n respondi√≥ con HTTP $response"
            echo "Esto puede ser normal si tienes Nginx externo configurado"
          fi
      
      - name: üìä Deployment Summary
        if: always()
        run: |
          echo ""
          echo "======================================"
          echo "  üéâ Deploy Completado"
          echo "======================================"
          echo ""
          echo "üìù Informaci√≥n:"
          echo "  ‚Ä¢ Proyecto: Convertidor"
          echo "  ‚Ä¢ Branch: ${{ github.ref_name }}"
          echo "  ‚Ä¢ Commit: ${{ github.sha }}"
          echo "  ‚Ä¢ Autor: ${{ github.actor }}"
          echo ""
          echo "üîó URLs:"
          echo "  ‚Ä¢ Contenedor directo: http://${{ secrets.VPS_HOST }}:8080"
          echo "  ‚Ä¢ Con Nginx externo: http://convertidor.synapzys.com"
          echo ""
          echo "üìã Comandos √∫tiles:"
          echo "  ‚Ä¢ Ver logs:     ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} 'cd ${{ env.DEPLOY_PATH }} && docker-compose logs -f'"
          echo "  ‚Ä¢ Ver estado:   ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} 'cd ${{ env.DEPLOY_PATH }} && docker-compose ps'"
          echo "  ‚Ä¢ Reiniciar:    ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} 'cd ${{ env.DEPLOY_PATH }} && docker-compose restart'"
          echo ""
EOF
