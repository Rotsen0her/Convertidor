name: Deploy to VPS

on:
  push:
    branches:
      - main  # Deploy automático cuando se hace push a main
  workflow_dispatch:  # Permite ejecutar manualmente desde GitHub

env:
  VPS_HOST: 89.116.51.172
  VPS_USER: root
  DEPLOY_PATH: /var/www/convertidor

jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    
    steps:
      - name: 🔍 Checkout code
        uses: actions/checkout@v3
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: 📥 Install dependencies
        run: npm ci
      
      - name: 🎨 Build Tailwind CSS
        run: npm run build-css
      
      - name: 🔐 Setup SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ env.VPS_HOST }} >> ~/.ssh/known_hosts
      
      - name: 💾 Create backup on server
        run: |
          ssh ${{ env.VPS_USER }}@${{ env.VPS_HOST }} << 'EOF'
            if [ -d ${{ env.DEPLOY_PATH }} ]; then
              timestamp=$(date +%Y%m%d_%H%M%S)
              tar -czf /tmp/convertidor_backup_${timestamp}.tar.gz ${{ env.DEPLOY_PATH }} 2>/dev/null || true
              echo "Backup created: /tmp/convertidor_backup_${timestamp}.tar.gz"
            fi
          EOF
      
      - name: 📤 Deploy to server
        run: |
          rsync -avz --progress --delete \
            --exclude 'node_modules' \
            --exclude 'venv' \
            --exclude '__pycache__' \
            --exclude '.git' \
            --exclude '.env' \
            --exclude '*.pyc' \
            --exclude '*.log' \
            --exclude 'uploads' \
            --exclude 'transformados' \
            ./backend/ ${{ env.VPS_USER }}@${{ env.VPS_HOST }}:${{ env.DEPLOY_PATH }}/
      
      - name: ⚙️  Setup and restart application
        run: |
          ssh ${{ env.VPS_USER }}@${{ env.VPS_HOST }} << 'EOF'
            set -e
            cd ${{ env.DEPLOY_PATH }}
            
            # Verificar virtualenv
            if [ ! -d venv ]; then
              echo "📦 Creating virtualenv..."
              python3 -m venv venv
            fi
            
            # Activar y actualizar dependencias
            echo "📦 Installing dependencies..."
            source venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt
            
            # Verificar .env
            if [ ! -f .env ]; then
              echo "⚠️  WARNING: .env file not found on server"
              echo "Please configure it manually"
              exit 1
            fi
            
            # Fix CRLF if present
            sed -i 's/\r$//' .env
            
            # Create cache directory
            mkdir -p /tmp/convertidor_cache
            chmod 755 /tmp/convertidor_cache
            
            # Restart with PM2
            if command -v pm2 &> /dev/null; then
              if pm2 list | grep -q convertidor-flask; then
                echo "🔄 Reloading application..."
                pm2 reload convertidor-flask --update-env
              else
                echo "🚀 Starting application..."
                pm2 start start_gunicorn.sh --name convertidor-flask --interpreter bash
                pm2 save
              fi
              echo "✅ Application restarted"
              pm2 list
            else
              echo "⚠️  PM2 not found, skipping restart"
            fi
          EOF
      
      - name: ✅ Deployment complete
        run: |
          echo "🎉 Deploy completed successfully!"
          echo "URL: http://${{ env.VPS_HOST }}"
